"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import logging

import daiquiri
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

daiquiri.setup(level=logging.INFO)

log = daiquiri.getLogger("config")


def feature_flag(name: str, desc: str) -> bool:
    val = os.getenv(name, "no").lower() in ("y", "yes", "on")
    if val:
        log.warning(f"Feature flag {name} is enabled", what=desc)
    return val


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


class Config:
    LOCAL_RUN = feature_flag("LOCAL_RUN", desc="Local sqlite file database")
    Stg = os.getenv("DEPLOYMENT_NAME", "Dev")
    Srv = os.getenv("SERVICE_NAME", "vec256")
    VERSION = Version = os.getenv("APP_VERSION", "local")
    IsProd = Stg == "Prod"

    integrations = [DjangoIntegration()]

    SENTRY_DSN = ""
    SUPPRESS_SENTRY = feature_flag("SUPPRESS_SENTRY", desc="Suppress sentry events")
    if SUPPRESS_SENTRY:
        SENTRY_DSN = None

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=integrations,
        release=f"{Srv}:{Stg}:{Version}",
        environment=Stg,
    )


CONFIG = Config()
LOCAL_RUN = CONFIG.LOCAL_RUN
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "80b28cac-1489-41e1-8fde-d7a4884d8899"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if Config.IsProd else True
ALLOWED_HOSTS = ["*"]

# STATIC_ROOT = "./static"
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "health_check",
    "health_check.db",
    "health_check.cache",
    "rest_framework",
    "drf_yasg",
    "django_prometheus",
    "rest_registration",
    "rest_framework.authtoken",
    "api",
]

MIDDLEWARE = [
    # "django_prometheus.middleware.PrometheusBeforeMiddleware",
    # "django.middleware.gzip.GZipMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "server_timing.middleware.ServerTiming",
    "app.mixins.BrowserCacheControl"
    # "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "app.wsgi.application"

REST_REGISTRATION = {
    "REGISTER_VERIFICATION_ENABLED": False,
    "RESET_PASSWORD_VERIFICATION_ENABLED": False,
    "REGISTER_EMAIL_VERIFICATION_ENABLED": False,
    "AUTH_TOKEN_MANAGER_CLASS": "rest_registration.auth_token_managers.RestFrameworkAuthTokenManager",
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


# DATABASES = {
#     "default": dj_database_url.config(default=Config.DATABASE_URI, conn_max_age=600)
# }


# def tune_db_params(db_params):
#     # To enable P9s, default is django.db.backends.postgresql_psycopg2
#     db_params["ENGINE"] = "django_prometheus.db.backends.postgresql"
#     db_params["OPTIONS"] = db_params.get("OPTIONS", {})
#     db_params["OPTIONS"]["connect_timeout"] = 10


# tune_db_params(DATABASES["default"])

if Config.LOCAL_RUN:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

YOUR_S3_BUCKET = "zappa-static"

# STATICFILES_STORAGE = "django_s3_storage.storage.StaticS3Storage"
AWS_S3_BUCKET_NAME_STATIC = YOUR_S3_BUCKET

# These next two lines will serve the static files directly
# from the s3 bucket
# AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % YOUR_S3_BUCKET
# STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN
STATIC_URL = "https://django-static-files.web.app/"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.DjangoModelPermissions"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "PAGE_SIZE": 20,
}

CORS_ORIGIN_ALLOW_ALL = True
CACHE_MAX_AGE = 60


SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "USE_SESSION_AUTH": False,
        "JWT": {"type": "apiKey", "name": "Authorization", "in": "header"},
    }
}


if Config.LOCAL_RUN:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
            "LOCATION": "unique-snowflake",
        }
    }
else:
    CACHES = {
        "default": {
            # Originally "django_redis.cache.RedisCache"
            "BACKEND": "django_prometheus.cache.backends.redis.RedisCache",
            "LOCATION": Config.REDIS_URI,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "SOCKET_TIMEOUT": 10,
                "SOCKET_CONNECT_TIMEOUT": 5 if not Config.LOCAL_RUN else 0.1,
            },
            "KEY_PREFIX": "django",
        }
    }
# See https://www.django-rest-framework.org/api-guide/settings/#strict_json
STRICT_JSON = True
